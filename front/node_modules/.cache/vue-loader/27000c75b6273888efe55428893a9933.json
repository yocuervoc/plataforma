{"remainingRequest":"/home/cuervo/Desktop/PollPlatform/front/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/cuervo/Desktop/PollPlatform/front/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/cuervo/Desktop/PollPlatform/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cuervo/Desktop/PollPlatform/front/src/views/Agregar.vue?vue&type=template&id=391a1a95&","dependencies":[{"path":"/home/cuervo/Desktop/PollPlatform/front/src/views/Agregar.vue","mtime":1582831135931},{"path":"/home/cuervo/Desktop/PollPlatform/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cuervo/Desktop/PollPlatform/front/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/cuervo/Desktop/PollPlatform/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cuervo/Desktop/PollPlatform/front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}