import Vue from './vue';
import { EVENT_OPTIONS_PASSIVE, eventOnOff } from './events'; // @vue/component

export var BVHoverSwap =
/*#__PURE__*/
Vue.extend({
  name: 'BVHoverSwap',
  props: {
    tag: {
      type: String,
      default: 'div'
    },
    parent: {
      type: Boolean,
      default: false
    }
  },
  data: function data() {
    return {
      isHovered: false
    };
  },
  watch: {
    parent: function parent() {
      this.listen(true);
    }
  },
  created: function created() {
    // Create non-reactive property
    this.$_hoverEl = null;
  },
  mounted: function mounted() {
    var _this = this;

    this.$nextTick(function () {
      return _this.listen(true);
    });
  },
  updated: function updated()
  /* istanbul ignore next */
  {
    var _this2 = this;

    this.$nextTick(function () {
      return _this2.listen(true);
    });
  },
  beforeDestroy: function beforeDestroy() {
    this.listen(false);
    this.$_hoverEl = null;
  },
  methods: {
    listen: function listen(on) {
      var el = this.parent ? this.$el.parentElement || this.$el : this.$el;

      if (on && this.$_hoverEl !== el) {
        this.listen(false);
        this.$_hoverEl = el;
      }

      eventOnOff(on, this.$_hoverEl, 'mouseenter', this.handleHover, EVENT_OPTIONS_PASSIVE);
      eventOnOff(on, this.$_hoverEl, 'mouseleave', this.handleHover, EVENT_OPTIONS_PASSIVE);
    },
    handleHover: function handleHover(evt) {
      this.isHovered = evt.type === 'mouseenter';
    }
  },
  render: function render(h) {
    var $scoped = this.$scopedSlots;

    var $default = $scoped.default || function () {
      return h();
    };

    var $hovered = $scoped.hovered || $default;
    return h(this.tag, [this.isHovered ? $hovered() : $default()]);
  }
});